// This file is generated by rust-protobuf 3.0.0-alpha.2. Do not edit
// .proto file is parsed by protoc 3.17.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dml.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_ALPHA_2;

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct PartitionField {
    // message fields
    pub name: ::std::string::String,
    // message oneof groups
    pub value: ::std::option::Option<partition_field::Value>,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a PartitionField {
    fn default() -> &'a PartitionField {
        <PartitionField as ::protobuf::Message>::default_instance()
    }
}

impl PartitionField {
    pub fn new() -> PartitionField {
        ::std::default::Default::default()
    }

    // string string_val = 2;

    pub fn get_string_val(&self) -> &str {
        match self.value {
            ::std::option::Option::Some(partition_field::Value::string_val(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_string_val(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_string_val(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(partition_field::Value::string_val(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_val(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(partition_field::Value::string_val(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_val(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(partition_field::Value::string_val(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(partition_field::Value::string_val(::std::string::String::new()));
        }
        match self.value {
            ::std::option::Option::Some(partition_field::Value::string_val(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_val(&mut self) -> ::std::string::String {
        if self.has_string_val() {
            match self.value.take() {
                ::std::option::Option::Some(partition_field::Value::string_val(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // int64 int64_val = 3;

    pub fn get_int64_val(&self) -> i64 {
        match self.value {
            ::std::option::Option::Some(partition_field::Value::int64_val(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_int64_val(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_int64_val(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(partition_field::Value::int64_val(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int64_val(&mut self, v: i64) {
        self.value = ::std::option::Option::Some(partition_field::Value::int64_val(v))
    }

    // bool bool_val = 4;

    pub fn get_bool_val(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(partition_field::Value::bool_val(v)) => v,
            _ => false,
        }
    }

    pub fn clear_bool_val(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_bool_val(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(partition_field::Value::bool_val(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bool_val(&mut self, v: bool) {
        self.value = ::std::option::Option::Some(partition_field::Value::bool_val(v))
    }

    // .google.protobuf.Timestamp timestamp_val = 5;

    pub fn get_timestamp_val(&self) -> &::protobuf::well_known_types::Timestamp {
        match self.value {
            ::std::option::Option::Some(partition_field::Value::timestamp_val(ref v)) => v,
            _ => <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_timestamp_val(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_timestamp_val(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(partition_field::Value::timestamp_val(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_timestamp_val(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.value = ::std::option::Option::Some(partition_field::Value::timestamp_val(v))
    }

    // Mutable pointer to the field.
    pub fn mut_timestamp_val(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if let ::std::option::Option::Some(partition_field::Value::timestamp_val(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(partition_field::Value::timestamp_val(::protobuf::well_known_types::Timestamp::new()));
        }
        match self.value {
            ::std::option::Option::Some(partition_field::Value::timestamp_val(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_timestamp_val(&mut self) -> ::protobuf::well_known_types::Timestamp {
        if self.has_timestamp_val() {
            match self.value.take() {
                ::std::option::Option::Some(partition_field::Value::timestamp_val(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Timestamp::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &PartitionField| { &m.name },
            |m: &mut PartitionField| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "string_val",
            PartitionField::has_string_val,
            PartitionField::get_string_val,
            PartitionField::set_string_val,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "int64_val",
            PartitionField::has_int64_val,
            PartitionField::get_int64_val,
            PartitionField::set_int64_val,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "bool_val",
            PartitionField::has_bool_val,
            PartitionField::get_bool_val,
            PartitionField::set_bool_val,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ::protobuf::well_known_types::Timestamp>(
            "timestamp_val",
            PartitionField::has_timestamp_val,
            PartitionField::get_timestamp_val,
            PartitionField::mut_timestamp_val,
            PartitionField::set_timestamp_val,
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PartitionField>(
            "PartitionField",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for PartitionField {
    fn is_initialized(&self) -> bool {
        if let Some(partition_field::Value::timestamp_val(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(partition_field::Value::string_val(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(partition_field::Value::int64_val(is.read_int64()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(partition_field::Value::bool_val(is.read_bool()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(partition_field::Value::timestamp_val(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &partition_field::Value::string_val(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &partition_field::Value::int64_val(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &partition_field::Value::bool_val(v) => {
                    my_size += 2;
                },
                &partition_field::Value::timestamp_val(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &partition_field::Value::string_val(ref v) => {
                    os.write_string(2, v)?;
                },
                &partition_field::Value::int64_val(v) => {
                    os.write_int64(3, v)?;
                },
                &partition_field::Value::bool_val(v) => {
                    os.write_bool(4, v)?;
                },
                &partition_field::Value::timestamp_val(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> PartitionField {
        PartitionField::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static PartitionField {
        static instance: PartitionField = PartitionField {
            name: ::std::string::String::new(),
            value: ::std::option::Option::None,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for PartitionField {
    fn clear(&mut self) {
        self.name.clear();
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartitionField {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartitionField {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PartitionField`
pub mod partition_field {

    #[derive(Clone,PartialEq,Debug)]
    #[derive(::serde::Serialize, ::serde::Deserialize)]
    pub enum Value {
        string_val(::std::string::String),
        int64_val(i64),
        bool_val(bool),
        timestamp_val(::protobuf::well_known_types::Timestamp),
    }

    impl ::protobuf::Oneof for Value {
    }
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct RepeatedFieldValue {
    // message fields
    pub vals: ::std::vec::Vec<FieldValue>,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a RepeatedFieldValue {
    fn default() -> &'a RepeatedFieldValue {
        <RepeatedFieldValue as ::protobuf::Message>::default_instance()
    }
}

impl RepeatedFieldValue {
    pub fn new() -> RepeatedFieldValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "vals",
            |m: &RepeatedFieldValue| { &m.vals },
            |m: &mut RepeatedFieldValue| { &mut m.vals },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RepeatedFieldValue>(
            "RepeatedFieldValue",
            1,
            fields,
        )
    }
}

impl ::protobuf::Message for RepeatedFieldValue {
    fn is_initialized(&self) -> bool {
        for v in &self.vals {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.vals)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.vals {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.vals {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> RepeatedFieldValue {
        RepeatedFieldValue::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 1)
    }

    fn default_instance() -> &'static RepeatedFieldValue {
        static instance: RepeatedFieldValue = RepeatedFieldValue {
            vals: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for RepeatedFieldValue {
    fn clear(&mut self) {
        self.vals.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RepeatedFieldValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RepeatedFieldValue {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct Field {
    // message fields
    pub name: ::std::string::String,
    pub value: ::protobuf::MessageField<FieldValue>,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Field {
    fn default() -> &'a Field {
        <Field as ::protobuf::Message>::default_instance()
    }
}

impl Field {
    pub fn new() -> Field {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Field| { &m.name },
            |m: &mut Field| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, FieldValue>(
            "value",
            |m: &Field| { &m.value },
            |m: &mut Field| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Field>(
            "Field",
            2,
            fields,
        )
    }
}

impl ::protobuf::Message for Field {
    fn is_initialized(&self) -> bool {
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(v) = self.value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Field {
        Field::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 2)
    }

    fn default_instance() -> &'static Field {
        static instance: Field = Field {
            name: ::std::string::String::new(),
            value: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for Field {
    fn clear(&mut self) {
        self.name.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Field {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Field {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct FieldValue {
    // message oneof groups
    pub value: ::std::option::Option<field_value::Value>,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a FieldValue {
    fn default() -> &'a FieldValue {
        <FieldValue as ::protobuf::Message>::default_instance()
    }
}

impl FieldValue {
    pub fn new() -> FieldValue {
        ::std::default::Default::default()
    }

    // .protos.dml.RepeatedFieldValue list_val = 1;

    pub fn get_list_val(&self) -> &RepeatedFieldValue {
        match self.value {
            ::std::option::Option::Some(field_value::Value::list_val(ref v)) => v,
            _ => <RepeatedFieldValue as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_list_val(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_list_val(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(field_value::Value::list_val(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_list_val(&mut self, v: RepeatedFieldValue) {
        self.value = ::std::option::Option::Some(field_value::Value::list_val(v))
    }

    // Mutable pointer to the field.
    pub fn mut_list_val(&mut self) -> &mut RepeatedFieldValue {
        if let ::std::option::Option::Some(field_value::Value::list_val(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(field_value::Value::list_val(RepeatedFieldValue::new()));
        }
        match self.value {
            ::std::option::Option::Some(field_value::Value::list_val(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_list_val(&mut self) -> RepeatedFieldValue {
        if self.has_list_val() {
            match self.value.take() {
                ::std::option::Option::Some(field_value::Value::list_val(v)) => v,
                _ => panic!(),
            }
        } else {
            RepeatedFieldValue::new()
        }
    }

    // string string_val = 2;

    pub fn get_string_val(&self) -> &str {
        match self.value {
            ::std::option::Option::Some(field_value::Value::string_val(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_string_val(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_string_val(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(field_value::Value::string_val(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_val(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(field_value::Value::string_val(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_val(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(field_value::Value::string_val(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(field_value::Value::string_val(::std::string::String::new()));
        }
        match self.value {
            ::std::option::Option::Some(field_value::Value::string_val(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_val(&mut self) -> ::std::string::String {
        if self.has_string_val() {
            match self.value.take() {
                ::std::option::Option::Some(field_value::Value::string_val(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // int64 int64_val = 3;

    pub fn get_int64_val(&self) -> i64 {
        match self.value {
            ::std::option::Option::Some(field_value::Value::int64_val(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_int64_val(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_int64_val(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(field_value::Value::int64_val(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int64_val(&mut self, v: i64) {
        self.value = ::std::option::Option::Some(field_value::Value::int64_val(v))
    }

    // bool bool_val = 4;

    pub fn get_bool_val(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(field_value::Value::bool_val(v)) => v,
            _ => false,
        }
    }

    pub fn clear_bool_val(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_bool_val(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(field_value::Value::bool_val(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bool_val(&mut self, v: bool) {
        self.value = ::std::option::Option::Some(field_value::Value::bool_val(v))
    }

    // bytes bytes_val = 5;

    pub fn get_bytes_val(&self) -> &[u8] {
        match self.value {
            ::std::option::Option::Some(field_value::Value::bytes_val(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_bytes_val(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_bytes_val(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(field_value::Value::bytes_val(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bytes_val(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::std::option::Option::Some(field_value::Value::bytes_val(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bytes_val(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(field_value::Value::bytes_val(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(field_value::Value::bytes_val(::std::vec::Vec::new()));
        }
        match self.value {
            ::std::option::Option::Some(field_value::Value::bytes_val(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bytes_val(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_bytes_val() {
            match self.value.take() {
                ::std::option::Option::Some(field_value::Value::bytes_val(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // double float64_val = 6;

    pub fn get_float64_val(&self) -> f64 {
        match self.value {
            ::std::option::Option::Some(field_value::Value::float64_val(v)) => v,
            _ => 0.,
        }
    }

    pub fn clear_float64_val(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_float64_val(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(field_value::Value::float64_val(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_float64_val(&mut self, v: f64) {
        self.value = ::std::option::Option::Some(field_value::Value::float64_val(v))
    }

    // .google.protobuf.Timestamp timestamp_val = 7;

    pub fn get_timestamp_val(&self) -> &::protobuf::well_known_types::Timestamp {
        match self.value {
            ::std::option::Option::Some(field_value::Value::timestamp_val(ref v)) => v,
            _ => <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_timestamp_val(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_timestamp_val(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(field_value::Value::timestamp_val(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_timestamp_val(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.value = ::std::option::Option::Some(field_value::Value::timestamp_val(v))
    }

    // Mutable pointer to the field.
    pub fn mut_timestamp_val(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if let ::std::option::Option::Some(field_value::Value::timestamp_val(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(field_value::Value::timestamp_val(::protobuf::well_known_types::Timestamp::new()));
        }
        match self.value {
            ::std::option::Option::Some(field_value::Value::timestamp_val(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_timestamp_val(&mut self) -> ::protobuf::well_known_types::Timestamp {
        if self.has_timestamp_val() {
            match self.value.take() {
                ::std::option::Option::Some(field_value::Value::timestamp_val(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Timestamp::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RepeatedFieldValue>(
            "list_val",
            FieldValue::has_list_val,
            FieldValue::get_list_val,
            FieldValue::mut_list_val,
            FieldValue::set_list_val,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "string_val",
            FieldValue::has_string_val,
            FieldValue::get_string_val,
            FieldValue::set_string_val,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "int64_val",
            FieldValue::has_int64_val,
            FieldValue::get_int64_val,
            FieldValue::set_int64_val,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "bool_val",
            FieldValue::has_bool_val,
            FieldValue::get_bool_val,
            FieldValue::set_bool_val,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "bytes_val",
            FieldValue::has_bytes_val,
            FieldValue::get_bytes_val,
            FieldValue::set_bytes_val,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "float64_val",
            FieldValue::has_float64_val,
            FieldValue::get_float64_val,
            FieldValue::set_float64_val,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ::protobuf::well_known_types::Timestamp>(
            "timestamp_val",
            FieldValue::has_timestamp_val,
            FieldValue::get_timestamp_val,
            FieldValue::mut_timestamp_val,
            FieldValue::set_timestamp_val,
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FieldValue>(
            "FieldValue",
            3,
            fields,
        )
    }
}

impl ::protobuf::Message for FieldValue {
    fn is_initialized(&self) -> bool {
        if let Some(field_value::Value::list_val(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(field_value::Value::timestamp_val(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(field_value::Value::list_val(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(field_value::Value::string_val(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(field_value::Value::int64_val(is.read_int64()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(field_value::Value::bool_val(is.read_bool()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(field_value::Value::bytes_val(is.read_bytes()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(field_value::Value::float64_val(is.read_double()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(field_value::Value::timestamp_val(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &field_value::Value::list_val(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &field_value::Value::string_val(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &field_value::Value::int64_val(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &field_value::Value::bool_val(v) => {
                    my_size += 2;
                },
                &field_value::Value::bytes_val(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(5, &v);
                },
                &field_value::Value::float64_val(v) => {
                    my_size += 9;
                },
                &field_value::Value::timestamp_val(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &field_value::Value::list_val(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &field_value::Value::string_val(ref v) => {
                    os.write_string(2, v)?;
                },
                &field_value::Value::int64_val(v) => {
                    os.write_int64(3, v)?;
                },
                &field_value::Value::bool_val(v) => {
                    os.write_bool(4, v)?;
                },
                &field_value::Value::bytes_val(ref v) => {
                    os.write_bytes(5, v)?;
                },
                &field_value::Value::float64_val(v) => {
                    os.write_double(6, v)?;
                },
                &field_value::Value::timestamp_val(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> FieldValue {
        FieldValue::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 3)
    }

    fn default_instance() -> &'static FieldValue {
        static instance: FieldValue = FieldValue {
            value: ::std::option::Option::None,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for FieldValue {
    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FieldValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldValue {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FieldValue`
pub mod field_value {

    #[derive(Clone,PartialEq,Debug)]
    #[derive(::serde::Serialize, ::serde::Deserialize)]
    pub enum Value {
        list_val(super::RepeatedFieldValue),
        string_val(::std::string::String),
        int64_val(i64),
        bool_val(bool),
        bytes_val(::std::vec::Vec<u8>),
        float64_val(f64),
        timestamp_val(::protobuf::well_known_types::Timestamp),
    }

    impl ::protobuf::Oneof for Value {
    }
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct Row {
    // message fields
    pub fields: ::std::vec::Vec<Field>,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Row {
    fn default() -> &'a Row {
        <Row as ::protobuf::Message>::default_instance()
    }
}

impl Row {
    pub fn new() -> Row {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fields",
            |m: &Row| { &m.fields },
            |m: &mut Row| { &mut m.fields },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Row>(
            "Row",
            4,
            fields,
        )
    }
}

impl ::protobuf::Message for Row {
    fn is_initialized(&self) -> bool {
        for v in &self.fields {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.fields)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.fields {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Row {
        Row::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 4)
    }

    fn default_instance() -> &'static Row {
        static instance: Row = Row {
            fields: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for Row {
    fn clear(&mut self) {
        self.fields.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Row {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Row {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct WriteToPartitionRequest {
    // message fields
    pub table_name: ::std::string::String,
    pub partition: ::std::vec::Vec<PartitionField>,
    pub rows: ::std::vec::Vec<Row>,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteToPartitionRequest {
    fn default() -> &'a WriteToPartitionRequest {
        <WriteToPartitionRequest as ::protobuf::Message>::default_instance()
    }
}

impl WriteToPartitionRequest {
    pub fn new() -> WriteToPartitionRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table_name",
            |m: &WriteToPartitionRequest| { &m.table_name },
            |m: &mut WriteToPartitionRequest| { &mut m.table_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "partition",
            |m: &WriteToPartitionRequest| { &m.partition },
            |m: &mut WriteToPartitionRequest| { &mut m.partition },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rows",
            |m: &WriteToPartitionRequest| { &m.rows },
            |m: &mut WriteToPartitionRequest| { &mut m.rows },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WriteToPartitionRequest>(
            "WriteToPartitionRequest",
            5,
            fields,
        )
    }
}

impl ::protobuf::Message for WriteToPartitionRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.partition {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.table_name = is.read_string()?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.partition)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.rows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.table_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table_name);
        }
        for value in &self.partition {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.rows {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.table_name.is_empty() {
            os.write_string(1, &self.table_name)?;
        }
        for v in &self.partition {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.rows {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> WriteToPartitionRequest {
        WriteToPartitionRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 5)
    }

    fn default_instance() -> &'static WriteToPartitionRequest {
        static instance: WriteToPartitionRequest = WriteToPartitionRequest {
            table_name: ::std::string::String::new(),
            partition: ::std::vec::Vec::new(),
            rows: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for WriteToPartitionRequest {
    fn clear(&mut self) {
        self.table_name.clear();
        self.partition.clear();
        self.rows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteToPartitionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteToPartitionRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct WriteToPartitionResponse {
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteToPartitionResponse {
    fn default() -> &'a WriteToPartitionResponse {
        <WriteToPartitionResponse as ::protobuf::Message>::default_instance()
    }
}

impl WriteToPartitionResponse {
    pub fn new() -> WriteToPartitionResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WriteToPartitionResponse>(
            "WriteToPartitionResponse",
            6,
            fields,
        )
    }
}

impl ::protobuf::Message for WriteToPartitionResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> WriteToPartitionResponse {
        WriteToPartitionResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 6)
    }

    fn default_instance() -> &'static WriteToPartitionResponse {
        static instance: WriteToPartitionResponse = WriteToPartitionResponse {
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for WriteToPartitionResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteToPartitionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteToPartitionResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct PartitionFilter {
    // message oneof groups
    pub value: ::std::option::Option<partition_filter::Value>,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a PartitionFilter {
    fn default() -> &'a PartitionFilter {
        <PartitionFilter as ::protobuf::Message>::default_instance()
    }
}

impl PartitionFilter {
    pub fn new() -> PartitionFilter {
        ::std::default::Default::default()
    }

    // .protos.dml.PartitionField equal_to = 1;

    pub fn get_equal_to(&self) -> &PartitionField {
        match self.value {
            ::std::option::Option::Some(partition_filter::Value::equal_to(ref v)) => v,
            _ => <PartitionField as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_equal_to(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_equal_to(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(partition_filter::Value::equal_to(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_equal_to(&mut self, v: PartitionField) {
        self.value = ::std::option::Option::Some(partition_filter::Value::equal_to(v))
    }

    // Mutable pointer to the field.
    pub fn mut_equal_to(&mut self) -> &mut PartitionField {
        if let ::std::option::Option::Some(partition_filter::Value::equal_to(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(partition_filter::Value::equal_to(PartitionField::new()));
        }
        match self.value {
            ::std::option::Option::Some(partition_filter::Value::equal_to(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_equal_to(&mut self) -> PartitionField {
        if self.has_equal_to() {
            match self.value.take() {
                ::std::option::Option::Some(partition_filter::Value::equal_to(v)) => v,
                _ => panic!(),
            }
        } else {
            PartitionField::new()
        }
    }

    // .protos.dml.PartitionField less_or_eq_to = 2;

    pub fn get_less_or_eq_to(&self) -> &PartitionField {
        match self.value {
            ::std::option::Option::Some(partition_filter::Value::less_or_eq_to(ref v)) => v,
            _ => <PartitionField as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_less_or_eq_to(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_less_or_eq_to(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(partition_filter::Value::less_or_eq_to(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_less_or_eq_to(&mut self, v: PartitionField) {
        self.value = ::std::option::Option::Some(partition_filter::Value::less_or_eq_to(v))
    }

    // Mutable pointer to the field.
    pub fn mut_less_or_eq_to(&mut self) -> &mut PartitionField {
        if let ::std::option::Option::Some(partition_filter::Value::less_or_eq_to(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(partition_filter::Value::less_or_eq_to(PartitionField::new()));
        }
        match self.value {
            ::std::option::Option::Some(partition_filter::Value::less_or_eq_to(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_less_or_eq_to(&mut self) -> PartitionField {
        if self.has_less_or_eq_to() {
            match self.value.take() {
                ::std::option::Option::Some(partition_filter::Value::less_or_eq_to(v)) => v,
                _ => panic!(),
            }
        } else {
            PartitionField::new()
        }
    }

    // .protos.dml.PartitionField less_than = 3;

    pub fn get_less_than(&self) -> &PartitionField {
        match self.value {
            ::std::option::Option::Some(partition_filter::Value::less_than(ref v)) => v,
            _ => <PartitionField as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_less_than(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_less_than(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(partition_filter::Value::less_than(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_less_than(&mut self, v: PartitionField) {
        self.value = ::std::option::Option::Some(partition_filter::Value::less_than(v))
    }

    // Mutable pointer to the field.
    pub fn mut_less_than(&mut self) -> &mut PartitionField {
        if let ::std::option::Option::Some(partition_filter::Value::less_than(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(partition_filter::Value::less_than(PartitionField::new()));
        }
        match self.value {
            ::std::option::Option::Some(partition_filter::Value::less_than(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_less_than(&mut self) -> PartitionField {
        if self.has_less_than() {
            match self.value.take() {
                ::std::option::Option::Some(partition_filter::Value::less_than(v)) => v,
                _ => panic!(),
            }
        } else {
            PartitionField::new()
        }
    }

    // .protos.dml.PartitionField greater_or_eq_to = 4;

    pub fn get_greater_or_eq_to(&self) -> &PartitionField {
        match self.value {
            ::std::option::Option::Some(partition_filter::Value::greater_or_eq_to(ref v)) => v,
            _ => <PartitionField as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_greater_or_eq_to(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_greater_or_eq_to(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(partition_filter::Value::greater_or_eq_to(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_greater_or_eq_to(&mut self, v: PartitionField) {
        self.value = ::std::option::Option::Some(partition_filter::Value::greater_or_eq_to(v))
    }

    // Mutable pointer to the field.
    pub fn mut_greater_or_eq_to(&mut self) -> &mut PartitionField {
        if let ::std::option::Option::Some(partition_filter::Value::greater_or_eq_to(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(partition_filter::Value::greater_or_eq_to(PartitionField::new()));
        }
        match self.value {
            ::std::option::Option::Some(partition_filter::Value::greater_or_eq_to(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_greater_or_eq_to(&mut self) -> PartitionField {
        if self.has_greater_or_eq_to() {
            match self.value.take() {
                ::std::option::Option::Some(partition_filter::Value::greater_or_eq_to(v)) => v,
                _ => panic!(),
            }
        } else {
            PartitionField::new()
        }
    }

    // .protos.dml.PartitionField greater_than = 5;

    pub fn get_greater_than(&self) -> &PartitionField {
        match self.value {
            ::std::option::Option::Some(partition_filter::Value::greater_than(ref v)) => v,
            _ => <PartitionField as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_greater_than(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_greater_than(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(partition_filter::Value::greater_than(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_greater_than(&mut self, v: PartitionField) {
        self.value = ::std::option::Option::Some(partition_filter::Value::greater_than(v))
    }

    // Mutable pointer to the field.
    pub fn mut_greater_than(&mut self) -> &mut PartitionField {
        if let ::std::option::Option::Some(partition_filter::Value::greater_than(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(partition_filter::Value::greater_than(PartitionField::new()));
        }
        match self.value {
            ::std::option::Option::Some(partition_filter::Value::greater_than(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_greater_than(&mut self) -> PartitionField {
        if self.has_greater_than() {
            match self.value.take() {
                ::std::option::Option::Some(partition_filter::Value::greater_than(v)) => v,
                _ => panic!(),
            }
        } else {
            PartitionField::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PartitionField>(
            "equal_to",
            PartitionFilter::has_equal_to,
            PartitionFilter::get_equal_to,
            PartitionFilter::mut_equal_to,
            PartitionFilter::set_equal_to,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PartitionField>(
            "less_or_eq_to",
            PartitionFilter::has_less_or_eq_to,
            PartitionFilter::get_less_or_eq_to,
            PartitionFilter::mut_less_or_eq_to,
            PartitionFilter::set_less_or_eq_to,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PartitionField>(
            "less_than",
            PartitionFilter::has_less_than,
            PartitionFilter::get_less_than,
            PartitionFilter::mut_less_than,
            PartitionFilter::set_less_than,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PartitionField>(
            "greater_or_eq_to",
            PartitionFilter::has_greater_or_eq_to,
            PartitionFilter::get_greater_or_eq_to,
            PartitionFilter::mut_greater_or_eq_to,
            PartitionFilter::set_greater_or_eq_to,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PartitionField>(
            "greater_than",
            PartitionFilter::has_greater_than,
            PartitionFilter::get_greater_than,
            PartitionFilter::mut_greater_than,
            PartitionFilter::set_greater_than,
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PartitionFilter>(
            "PartitionFilter",
            7,
            fields,
        )
    }
}

impl ::protobuf::Message for PartitionFilter {
    fn is_initialized(&self) -> bool {
        if let Some(partition_filter::Value::equal_to(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(partition_filter::Value::less_or_eq_to(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(partition_filter::Value::less_than(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(partition_filter::Value::greater_or_eq_to(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(partition_filter::Value::greater_than(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(partition_filter::Value::equal_to(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(partition_filter::Value::less_or_eq_to(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(partition_filter::Value::less_than(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(partition_filter::Value::greater_or_eq_to(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(partition_filter::Value::greater_than(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &partition_filter::Value::equal_to(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &partition_filter::Value::less_or_eq_to(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &partition_filter::Value::less_than(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &partition_filter::Value::greater_or_eq_to(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &partition_filter::Value::greater_than(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &partition_filter::Value::equal_to(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &partition_filter::Value::less_or_eq_to(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &partition_filter::Value::less_than(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &partition_filter::Value::greater_or_eq_to(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &partition_filter::Value::greater_than(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> PartitionFilter {
        PartitionFilter::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 7)
    }

    fn default_instance() -> &'static PartitionFilter {
        static instance: PartitionFilter = PartitionFilter {
            value: ::std::option::Option::None,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for PartitionFilter {
    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartitionFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartitionFilter {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PartitionFilter`
pub mod partition_filter {

    #[derive(Clone,PartialEq,Debug)]
    #[derive(::serde::Serialize, ::serde::Deserialize)]
    pub enum Value {
        equal_to(super::PartitionField),
        less_or_eq_to(super::PartitionField),
        less_than(super::PartitionField),
        greater_or_eq_to(super::PartitionField),
        greater_than(super::PartitionField),
    }

    impl ::protobuf::Oneof for Value {
    }
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct ListSegmentsRequest {
    // message fields
    pub table_name: ::std::string::String,
    pub partition_filter: ::std::vec::Vec<PartitionFilter>,
    pub include_metadata: bool,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListSegmentsRequest {
    fn default() -> &'a ListSegmentsRequest {
        <ListSegmentsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListSegmentsRequest {
    pub fn new() -> ListSegmentsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table_name",
            |m: &ListSegmentsRequest| { &m.table_name },
            |m: &mut ListSegmentsRequest| { &mut m.table_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "partition_filter",
            |m: &ListSegmentsRequest| { &m.partition_filter },
            |m: &mut ListSegmentsRequest| { &mut m.partition_filter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "include_metadata",
            |m: &ListSegmentsRequest| { &m.include_metadata },
            |m: &mut ListSegmentsRequest| { &mut m.include_metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListSegmentsRequest>(
            "ListSegmentsRequest",
            8,
            fields,
        )
    }
}

impl ::protobuf::Message for ListSegmentsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.partition_filter {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.table_name = is.read_string()?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.partition_filter)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.include_metadata = is.read_bool()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.table_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table_name);
        }
        for value in &self.partition_filter {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.include_metadata != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.table_name.is_empty() {
            os.write_string(1, &self.table_name)?;
        }
        for v in &self.partition_filter {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.include_metadata != false {
            os.write_bool(3, self.include_metadata)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ListSegmentsRequest {
        ListSegmentsRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 8)
    }

    fn default_instance() -> &'static ListSegmentsRequest {
        static instance: ListSegmentsRequest = ListSegmentsRequest {
            table_name: ::std::string::String::new(),
            partition_filter: ::std::vec::Vec::new(),
            include_metadata: false,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for ListSegmentsRequest {
    fn clear(&mut self) {
        self.table_name.clear();
        self.partition_filter.clear();
        self.include_metadata = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListSegmentsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListSegmentsRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct SegmentMetadata {
    // message fields
    pub count: u32,
    pub latest_version: u64,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a SegmentMetadata {
    fn default() -> &'a SegmentMetadata {
        <SegmentMetadata as ::protobuf::Message>::default_instance()
    }
}

impl SegmentMetadata {
    pub fn new() -> SegmentMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "count",
            |m: &SegmentMetadata| { &m.count },
            |m: &mut SegmentMetadata| { &mut m.count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "latest_version",
            |m: &SegmentMetadata| { &m.latest_version },
            |m: &mut SegmentMetadata| { &mut m.latest_version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SegmentMetadata>(
            "SegmentMetadata",
            9,
            fields,
        )
    }
}

impl ::protobuf::Message for SegmentMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.count = is.read_uint32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.latest_version = is.read_uint64()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.latest_version != 0 {
            my_size += ::protobuf::rt::value_size(2, self.latest_version, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.count != 0 {
            os.write_uint32(1, self.count)?;
        }
        if self.latest_version != 0 {
            os.write_uint64(2, self.latest_version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> SegmentMetadata {
        SegmentMetadata::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 9)
    }

    fn default_instance() -> &'static SegmentMetadata {
        static instance: SegmentMetadata = SegmentMetadata {
            count: 0,
            latest_version: 0,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for SegmentMetadata {
    fn clear(&mut self) {
        self.count = 0;
        self.latest_version = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SegmentMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SegmentMetadata {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct Segment {
    // message fields
    pub partition: ::std::vec::Vec<PartitionField>,
    pub segment_id: ::std::string::String,
    pub metadata: ::protobuf::MessageField<SegmentMetadata>,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Segment {
    fn default() -> &'a Segment {
        <Segment as ::protobuf::Message>::default_instance()
    }
}

impl Segment {
    pub fn new() -> Segment {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "partition",
            |m: &Segment| { &m.partition },
            |m: &mut Segment| { &mut m.partition },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "segment_id",
            |m: &Segment| { &m.segment_id },
            |m: &mut Segment| { &mut m.segment_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SegmentMetadata>(
            "metadata",
            |m: &Segment| { &m.metadata },
            |m: &mut Segment| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Segment>(
            "Segment",
            10,
            fields,
        )
    }
}

impl ::protobuf::Message for Segment {
    fn is_initialized(&self) -> bool {
        for v in &self.partition {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.partition)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.segment_id = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.partition {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.segment_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.segment_id);
        }
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.partition {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if !self.segment_id.is_empty() {
            os.write_string(2, &self.segment_id)?;
        }
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Segment {
        Segment::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 10)
    }

    fn default_instance() -> &'static Segment {
        static instance: Segment = Segment {
            partition: ::std::vec::Vec::new(),
            segment_id: ::std::string::String::new(),
            metadata: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for Segment {
    fn clear(&mut self) {
        self.partition.clear();
        self.segment_id.clear();
        self.metadata.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Segment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Segment {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct ListSegmentsResponse {
    // message fields
    pub segments: ::std::vec::Vec<Segment>,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListSegmentsResponse {
    fn default() -> &'a ListSegmentsResponse {
        <ListSegmentsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListSegmentsResponse {
    pub fn new() -> ListSegmentsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "segments",
            |m: &ListSegmentsResponse| { &m.segments },
            |m: &mut ListSegmentsResponse| { &mut m.segments },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListSegmentsResponse>(
            "ListSegmentsResponse",
            11,
            fields,
        )
    }
}

impl ::protobuf::Message for ListSegmentsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.segments {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.segments)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.segments {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.segments {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ListSegmentsResponse {
        ListSegmentsResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 11)
    }

    fn default_instance() -> &'static ListSegmentsResponse {
        static instance: ListSegmentsResponse = ListSegmentsResponse {
            segments: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for ListSegmentsResponse {
    fn clear(&mut self) {
        self.segments.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListSegmentsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListSegmentsResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct ReadSegmentColumnRequest {
    // message fields
    pub table_name: ::std::string::String,
    pub partition: ::std::vec::Vec<PartitionField>,
    pub segment_id: ::std::string::String,
    pub column_name: ::std::string::String,
    pub continuation_token: ::std::string::String,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadSegmentColumnRequest {
    fn default() -> &'a ReadSegmentColumnRequest {
        <ReadSegmentColumnRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadSegmentColumnRequest {
    pub fn new() -> ReadSegmentColumnRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table_name",
            |m: &ReadSegmentColumnRequest| { &m.table_name },
            |m: &mut ReadSegmentColumnRequest| { &mut m.table_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "partition",
            |m: &ReadSegmentColumnRequest| { &m.partition },
            |m: &mut ReadSegmentColumnRequest| { &mut m.partition },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "segment_id",
            |m: &ReadSegmentColumnRequest| { &m.segment_id },
            |m: &mut ReadSegmentColumnRequest| { &mut m.segment_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "column_name",
            |m: &ReadSegmentColumnRequest| { &m.column_name },
            |m: &mut ReadSegmentColumnRequest| { &mut m.column_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "continuation_token",
            |m: &ReadSegmentColumnRequest| { &m.continuation_token },
            |m: &mut ReadSegmentColumnRequest| { &mut m.continuation_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadSegmentColumnRequest>(
            "ReadSegmentColumnRequest",
            12,
            fields,
        )
    }
}

impl ::protobuf::Message for ReadSegmentColumnRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.partition {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.table_name = is.read_string()?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.partition)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.segment_id = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.column_name = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.continuation_token = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.table_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table_name);
        }
        for value in &self.partition {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.segment_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.segment_id);
        }
        if !self.column_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.column_name);
        }
        if !self.continuation_token.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.continuation_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.table_name.is_empty() {
            os.write_string(1, &self.table_name)?;
        }
        for v in &self.partition {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if !self.segment_id.is_empty() {
            os.write_string(3, &self.segment_id)?;
        }
        if !self.column_name.is_empty() {
            os.write_string(4, &self.column_name)?;
        }
        if !self.continuation_token.is_empty() {
            os.write_string(5, &self.continuation_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ReadSegmentColumnRequest {
        ReadSegmentColumnRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 12)
    }

    fn default_instance() -> &'static ReadSegmentColumnRequest {
        static instance: ReadSegmentColumnRequest = ReadSegmentColumnRequest {
            table_name: ::std::string::String::new(),
            partition: ::std::vec::Vec::new(),
            segment_id: ::std::string::String::new(),
            column_name: ::std::string::String::new(),
            continuation_token: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for ReadSegmentColumnRequest {
    fn clear(&mut self) {
        self.table_name.clear();
        self.partition.clear();
        self.segment_id.clear();
        self.column_name.clear();
        self.continuation_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadSegmentColumnRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadSegmentColumnRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct ReadSegmentColumnResponse {
    // message fields
    pub codec: ::std::string::String,
    pub compressed_data: ::std::vec::Vec<u8>,
    pub uncompressed_data: ::std::vec::Vec<u8>,
    pub continuation_token: ::std::string::String,
    pub row_count: u32,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadSegmentColumnResponse {
    fn default() -> &'a ReadSegmentColumnResponse {
        <ReadSegmentColumnResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReadSegmentColumnResponse {
    pub fn new() -> ReadSegmentColumnResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "codec",
            |m: &ReadSegmentColumnResponse| { &m.codec },
            |m: &mut ReadSegmentColumnResponse| { &mut m.codec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "compressed_data",
            |m: &ReadSegmentColumnResponse| { &m.compressed_data },
            |m: &mut ReadSegmentColumnResponse| { &mut m.compressed_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uncompressed_data",
            |m: &ReadSegmentColumnResponse| { &m.uncompressed_data },
            |m: &mut ReadSegmentColumnResponse| { &mut m.uncompressed_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "continuation_token",
            |m: &ReadSegmentColumnResponse| { &m.continuation_token },
            |m: &mut ReadSegmentColumnResponse| { &mut m.continuation_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "row_count",
            |m: &ReadSegmentColumnResponse| { &m.row_count },
            |m: &mut ReadSegmentColumnResponse| { &mut m.row_count },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadSegmentColumnResponse>(
            "ReadSegmentColumnResponse",
            13,
            fields,
        )
    }
}

impl ::protobuf::Message for ReadSegmentColumnResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.codec = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.compressed_data = is.read_bytes()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.uncompressed_data = is.read_bytes()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.continuation_token = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.row_count = is.read_uint32()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.codec.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.codec);
        }
        if !self.compressed_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.compressed_data);
        }
        if !self.uncompressed_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.uncompressed_data);
        }
        if !self.continuation_token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.continuation_token);
        }
        if self.row_count != 0 {
            my_size += ::protobuf::rt::value_size(5, self.row_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.codec.is_empty() {
            os.write_string(1, &self.codec)?;
        }
        if !self.compressed_data.is_empty() {
            os.write_bytes(2, &self.compressed_data)?;
        }
        if !self.uncompressed_data.is_empty() {
            os.write_bytes(3, &self.uncompressed_data)?;
        }
        if !self.continuation_token.is_empty() {
            os.write_string(4, &self.continuation_token)?;
        }
        if self.row_count != 0 {
            os.write_uint32(5, self.row_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ReadSegmentColumnResponse {
        ReadSegmentColumnResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 13)
    }

    fn default_instance() -> &'static ReadSegmentColumnResponse {
        static instance: ReadSegmentColumnResponse = ReadSegmentColumnResponse {
            codec: ::std::string::String::new(),
            compressed_data: ::std::vec::Vec::new(),
            uncompressed_data: ::std::vec::Vec::new(),
            continuation_token: ::std::string::String::new(),
            row_count: 0,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for ReadSegmentColumnResponse {
    fn clear(&mut self) {
        self.codec.clear();
        self.compressed_data.clear();
        self.uncompressed_data.clear();
        self.continuation_token.clear();
        self.row_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadSegmentColumnResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadSegmentColumnResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tdml.proto\x12\nprotos.dml\x1a\x1fgoogle/protobuf/timestamp.proto\"\
    \xcd\x01\n\x0ePartitionField\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04na\
    me\x12\x1f\n\nstring_val\x18\x02\x20\x01(\tH\0R\tstringVal\x12\x1d\n\tin\
    t64_val\x18\x03\x20\x01(\x03H\0R\x08int64Val\x12\x1b\n\x08bool_val\x18\
    \x04\x20\x01(\x08H\0R\x07boolVal\x12A\n\rtimestamp_val\x18\x05\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampH\0R\x0ctimestampValB\x07\n\x05value\
    \"@\n\x12RepeatedFieldValue\x12*\n\x04vals\x18\x01\x20\x03(\x0b2\x16.pro\
    tos.dml.FieldValueR\x04vals\"I\n\x05Field\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\x12,\n\x05value\x18\x02\x20\x01(\x0b2\x16.protos.dml.Fi\
    eldValueR\x05value\"\xb4\x02\n\nFieldValue\x12;\n\x08list_val\x18\x01\
    \x20\x01(\x0b2\x1e.protos.dml.RepeatedFieldValueH\0R\x07listVal\x12\x1f\
    \n\nstring_val\x18\x02\x20\x01(\tH\0R\tstringVal\x12\x1d\n\tint64_val\
    \x18\x03\x20\x01(\x03H\0R\x08int64Val\x12\x1b\n\x08bool_val\x18\x04\x20\
    \x01(\x08H\0R\x07boolVal\x12\x1d\n\tbytes_val\x18\x05\x20\x01(\x0cH\0R\
    \x08bytesVal\x12!\n\x0bfloat64_val\x18\x06\x20\x01(\x01H\0R\nfloat64Val\
    \x12A\n\rtimestamp_val\x18\x07\x20\x01(\x0b2\x1a.google.protobuf.Timesta\
    mpH\0R\x0ctimestampValB\x07\n\x05value\"0\n\x03Row\x12)\n\x06fields\x18\
    \x01\x20\x03(\x0b2\x11.protos.dml.FieldR\x06fields\"\x97\x01\n\x17WriteT\
    oPartitionRequest\x12\x1d\n\ntable_name\x18\x01\x20\x01(\tR\ttableName\
    \x128\n\tpartition\x18\x02\x20\x03(\x0b2\x1a.protos.dml.PartitionFieldR\
    \tpartition\x12#\n\x04rows\x18\x03\x20\x03(\x0b2\x0f.protos.dml.RowR\x04\
    rows\"\x1a\n\x18WriteToPartitionResponse\"\xd7\x02\n\x0fPartitionFilter\
    \x127\n\x08equal_to\x18\x01\x20\x01(\x0b2\x1a.protos.dml.PartitionFieldH\
    \0R\x07equalTo\x12?\n\rless_or_eq_to\x18\x02\x20\x01(\x0b2\x1a.protos.dm\
    l.PartitionFieldH\0R\nlessOrEqTo\x129\n\tless_than\x18\x03\x20\x01(\x0b2\
    \x1a.protos.dml.PartitionFieldH\0R\x08lessThan\x12E\n\x10greater_or_eq_t\
    o\x18\x04\x20\x01(\x0b2\x1a.protos.dml.PartitionFieldH\0R\rgreaterOrEqTo\
    \x12?\n\x0cgreater_than\x18\x05\x20\x01(\x0b2\x1a.protos.dml.PartitionFi\
    eldH\0R\x0bgreaterThanB\x07\n\x05value\"\xa7\x01\n\x13ListSegmentsReques\
    t\x12\x1d\n\ntable_name\x18\x01\x20\x01(\tR\ttableName\x12F\n\x10partiti\
    on_filter\x18\x02\x20\x03(\x0b2\x1b.protos.dml.PartitionFilterR\x0fparti\
    tionFilter\x12)\n\x10include_metadata\x18\x03\x20\x01(\x08R\x0fincludeMe\
    tadata\"N\n\x0fSegmentMetadata\x12\x14\n\x05count\x18\x01\x20\x01(\rR\
    \x05count\x12%\n\x0elatest_version\x18\x02\x20\x01(\x04R\rlatestVersion\
    \"\x9b\x01\n\x07Segment\x128\n\tpartition\x18\x01\x20\x03(\x0b2\x1a.prot\
    os.dml.PartitionFieldR\tpartition\x12\x1d\n\nsegment_id\x18\x02\x20\x01(\
    \tR\tsegmentId\x127\n\x08metadata\x18\x03\x20\x01(\x0b2\x1b.protos.dml.S\
    egmentMetadataR\x08metadata\"G\n\x14ListSegmentsResponse\x12/\n\x08segme\
    nts\x18\x01\x20\x03(\x0b2\x13.protos.dml.SegmentR\x08segments\"\xe2\x01\
    \n\x18ReadSegmentColumnRequest\x12\x1d\n\ntable_name\x18\x01\x20\x01(\tR\
    \ttableName\x128\n\tpartition\x18\x02\x20\x03(\x0b2\x1a.protos.dml.Parti\
    tionFieldR\tpartition\x12\x1d\n\nsegment_id\x18\x03\x20\x01(\tR\tsegment\
    Id\x12\x1f\n\x0bcolumn_name\x18\x04\x20\x01(\tR\ncolumnName\x12-\n\x12co\
    ntinuation_token\x18\x05\x20\x01(\tR\x11continuationToken\"\xd3\x01\n\
    \x19ReadSegmentColumnResponse\x12\x14\n\x05codec\x18\x01\x20\x01(\tR\x05\
    codec\x12'\n\x0fcompressed_data\x18\x02\x20\x01(\x0cR\x0ecompressedData\
    \x12+\n\x11uncompressed_data\x18\x03\x20\x01(\x0cR\x10uncompressedData\
    \x12-\n\x12continuation_token\x18\x04\x20\x01(\tR\x11continuationToken\
    \x12\x1b\n\trow_count\x18\x05\x20\x01(\rR\x08rowCountB\x15\n\x11com.panc\
    akedb.idlP\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(::protobuf::well_known_types::file_descriptors::timestamp());
        let mut messages = ::std::vec::Vec::new();
        messages.push(PartitionField::generated_message_descriptor_data());
        messages.push(RepeatedFieldValue::generated_message_descriptor_data());
        messages.push(Field::generated_message_descriptor_data());
        messages.push(FieldValue::generated_message_descriptor_data());
        messages.push(Row::generated_message_descriptor_data());
        messages.push(WriteToPartitionRequest::generated_message_descriptor_data());
        messages.push(WriteToPartitionResponse::generated_message_descriptor_data());
        messages.push(PartitionFilter::generated_message_descriptor_data());
        messages.push(ListSegmentsRequest::generated_message_descriptor_data());
        messages.push(SegmentMetadata::generated_message_descriptor_data());
        messages.push(Segment::generated_message_descriptor_data());
        messages.push(ListSegmentsResponse::generated_message_descriptor_data());
        messages.push(ReadSegmentColumnRequest::generated_message_descriptor_data());
        messages.push(ReadSegmentColumnResponse::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
