use std::fs;
use std::path::Path;

fn main() {
  let out_dir = "../rust/src";

  let protos = vec![
    "dtype",
    "partition_dtype",
    "schema",
    "ddl",
    "dml",
    "service",
  ];

  let proto_files = protos.iter()
    .map(|p| format!("../protos/{}.proto", p))
    .collect::<Vec<String>>();

  tonic_build::configure()
    .out_dir(out_dir)
    .compile(
      &proto_files,
      &["../protos"],
    )
    .expect("codegen failed");
  let mods = protos.iter()
    .map(|p| {
      let cfg = if p.contains("service") {
        "#[cfg(feature = \"service\")]\n"
      } else {
        ""
      };
      format!("{}pub mod {} {{ include!(\"{}.rs\"); }}", cfg, p, p)
    })
    .collect::<Vec<String>>();
  let lib_content = format!(
    "//THIS FILE IS GENERATED BY rust_builder - DO NOT MODIFY!\n\n{}",
    mods.join("\n")
  );
  fs::write(
    Path::new(&out_dir).join("lib.rs"),
    lib_content,
  ).expect("unable to write lib.rs");
}