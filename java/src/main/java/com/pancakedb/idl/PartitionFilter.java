// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dml.proto

package com.pancakedb.idl;

/**
 * <pre>
 *LISTING SEGMENTS
 * </pre>
 *
 * Protobuf type {@code protos.dml.PartitionFilter}
 */
public final class PartitionFilter extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:protos.dml.PartitionFilter)
    PartitionFilterOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PartitionFilter.newBuilder() to construct.
  private PartitionFilter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PartitionFilter() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new PartitionFilter();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private PartitionFilter(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.pancakedb.idl.PartitionField.Builder subBuilder = null;
            if (valueCase_ == 1) {
              subBuilder = ((com.pancakedb.idl.PartitionField) value_).toBuilder();
            }
            value_ =
                input.readMessage(com.pancakedb.idl.PartitionField.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.pancakedb.idl.PartitionField) value_);
              value_ = subBuilder.buildPartial();
            }
            valueCase_ = 1;
            break;
          }
          case 18: {
            com.pancakedb.idl.PartitionField.Builder subBuilder = null;
            if (valueCase_ == 2) {
              subBuilder = ((com.pancakedb.idl.PartitionField) value_).toBuilder();
            }
            value_ =
                input.readMessage(com.pancakedb.idl.PartitionField.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.pancakedb.idl.PartitionField) value_);
              value_ = subBuilder.buildPartial();
            }
            valueCase_ = 2;
            break;
          }
          case 26: {
            com.pancakedb.idl.PartitionField.Builder subBuilder = null;
            if (valueCase_ == 3) {
              subBuilder = ((com.pancakedb.idl.PartitionField) value_).toBuilder();
            }
            value_ =
                input.readMessage(com.pancakedb.idl.PartitionField.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.pancakedb.idl.PartitionField) value_);
              value_ = subBuilder.buildPartial();
            }
            valueCase_ = 3;
            break;
          }
          case 34: {
            com.pancakedb.idl.PartitionField.Builder subBuilder = null;
            if (valueCase_ == 4) {
              subBuilder = ((com.pancakedb.idl.PartitionField) value_).toBuilder();
            }
            value_ =
                input.readMessage(com.pancakedb.idl.PartitionField.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.pancakedb.idl.PartitionField) value_);
              value_ = subBuilder.buildPartial();
            }
            valueCase_ = 4;
            break;
          }
          case 42: {
            com.pancakedb.idl.PartitionField.Builder subBuilder = null;
            if (valueCase_ == 5) {
              subBuilder = ((com.pancakedb.idl.PartitionField) value_).toBuilder();
            }
            value_ =
                input.readMessage(com.pancakedb.idl.PartitionField.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.pancakedb.idl.PartitionField) value_);
              value_ = subBuilder.buildPartial();
            }
            valueCase_ = 5;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.pancakedb.idl.Dml.internal_static_protos_dml_PartitionFilter_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.pancakedb.idl.Dml.internal_static_protos_dml_PartitionFilter_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.pancakedb.idl.PartitionFilter.class, com.pancakedb.idl.PartitionFilter.Builder.class);
  }

  private int valueCase_ = 0;
  private java.lang.Object value_;
  public enum ValueCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    EQUAL_TO(1),
    LESS_OR_EQ_TO(2),
    LESS_THAN(3),
    GREATER_OR_EQ_TO(4),
    GREATER_THAN(5),
    VALUE_NOT_SET(0);
    private final int value;
    private ValueCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ValueCase valueOf(int value) {
      return forNumber(value);
    }

    public static ValueCase forNumber(int value) {
      switch (value) {
        case 1: return EQUAL_TO;
        case 2: return LESS_OR_EQ_TO;
        case 3: return LESS_THAN;
        case 4: return GREATER_OR_EQ_TO;
        case 5: return GREATER_THAN;
        case 0: return VALUE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ValueCase
  getValueCase() {
    return ValueCase.forNumber(
        valueCase_);
  }

  public static final int EQUAL_TO_FIELD_NUMBER = 1;
  /**
   * <code>.protos.dml.PartitionField equal_to = 1;</code>
   * @return Whether the equalTo field is set.
   */
  @java.lang.Override
  public boolean hasEqualTo() {
    return valueCase_ == 1;
  }
  /**
   * <code>.protos.dml.PartitionField equal_to = 1;</code>
   * @return The equalTo.
   */
  @java.lang.Override
  public com.pancakedb.idl.PartitionField getEqualTo() {
    if (valueCase_ == 1) {
       return (com.pancakedb.idl.PartitionField) value_;
    }
    return com.pancakedb.idl.PartitionField.getDefaultInstance();
  }
  /**
   * <code>.protos.dml.PartitionField equal_to = 1;</code>
   */
  @java.lang.Override
  public com.pancakedb.idl.PartitionFieldOrBuilder getEqualToOrBuilder() {
    if (valueCase_ == 1) {
       return (com.pancakedb.idl.PartitionField) value_;
    }
    return com.pancakedb.idl.PartitionField.getDefaultInstance();
  }

  public static final int LESS_OR_EQ_TO_FIELD_NUMBER = 2;
  /**
   * <code>.protos.dml.PartitionField less_or_eq_to = 2;</code>
   * @return Whether the lessOrEqTo field is set.
   */
  @java.lang.Override
  public boolean hasLessOrEqTo() {
    return valueCase_ == 2;
  }
  /**
   * <code>.protos.dml.PartitionField less_or_eq_to = 2;</code>
   * @return The lessOrEqTo.
   */
  @java.lang.Override
  public com.pancakedb.idl.PartitionField getLessOrEqTo() {
    if (valueCase_ == 2) {
       return (com.pancakedb.idl.PartitionField) value_;
    }
    return com.pancakedb.idl.PartitionField.getDefaultInstance();
  }
  /**
   * <code>.protos.dml.PartitionField less_or_eq_to = 2;</code>
   */
  @java.lang.Override
  public com.pancakedb.idl.PartitionFieldOrBuilder getLessOrEqToOrBuilder() {
    if (valueCase_ == 2) {
       return (com.pancakedb.idl.PartitionField) value_;
    }
    return com.pancakedb.idl.PartitionField.getDefaultInstance();
  }

  public static final int LESS_THAN_FIELD_NUMBER = 3;
  /**
   * <code>.protos.dml.PartitionField less_than = 3;</code>
   * @return Whether the lessThan field is set.
   */
  @java.lang.Override
  public boolean hasLessThan() {
    return valueCase_ == 3;
  }
  /**
   * <code>.protos.dml.PartitionField less_than = 3;</code>
   * @return The lessThan.
   */
  @java.lang.Override
  public com.pancakedb.idl.PartitionField getLessThan() {
    if (valueCase_ == 3) {
       return (com.pancakedb.idl.PartitionField) value_;
    }
    return com.pancakedb.idl.PartitionField.getDefaultInstance();
  }
  /**
   * <code>.protos.dml.PartitionField less_than = 3;</code>
   */
  @java.lang.Override
  public com.pancakedb.idl.PartitionFieldOrBuilder getLessThanOrBuilder() {
    if (valueCase_ == 3) {
       return (com.pancakedb.idl.PartitionField) value_;
    }
    return com.pancakedb.idl.PartitionField.getDefaultInstance();
  }

  public static final int GREATER_OR_EQ_TO_FIELD_NUMBER = 4;
  /**
   * <code>.protos.dml.PartitionField greater_or_eq_to = 4;</code>
   * @return Whether the greaterOrEqTo field is set.
   */
  @java.lang.Override
  public boolean hasGreaterOrEqTo() {
    return valueCase_ == 4;
  }
  /**
   * <code>.protos.dml.PartitionField greater_or_eq_to = 4;</code>
   * @return The greaterOrEqTo.
   */
  @java.lang.Override
  public com.pancakedb.idl.PartitionField getGreaterOrEqTo() {
    if (valueCase_ == 4) {
       return (com.pancakedb.idl.PartitionField) value_;
    }
    return com.pancakedb.idl.PartitionField.getDefaultInstance();
  }
  /**
   * <code>.protos.dml.PartitionField greater_or_eq_to = 4;</code>
   */
  @java.lang.Override
  public com.pancakedb.idl.PartitionFieldOrBuilder getGreaterOrEqToOrBuilder() {
    if (valueCase_ == 4) {
       return (com.pancakedb.idl.PartitionField) value_;
    }
    return com.pancakedb.idl.PartitionField.getDefaultInstance();
  }

  public static final int GREATER_THAN_FIELD_NUMBER = 5;
  /**
   * <code>.protos.dml.PartitionField greater_than = 5;</code>
   * @return Whether the greaterThan field is set.
   */
  @java.lang.Override
  public boolean hasGreaterThan() {
    return valueCase_ == 5;
  }
  /**
   * <code>.protos.dml.PartitionField greater_than = 5;</code>
   * @return The greaterThan.
   */
  @java.lang.Override
  public com.pancakedb.idl.PartitionField getGreaterThan() {
    if (valueCase_ == 5) {
       return (com.pancakedb.idl.PartitionField) value_;
    }
    return com.pancakedb.idl.PartitionField.getDefaultInstance();
  }
  /**
   * <code>.protos.dml.PartitionField greater_than = 5;</code>
   */
  @java.lang.Override
  public com.pancakedb.idl.PartitionFieldOrBuilder getGreaterThanOrBuilder() {
    if (valueCase_ == 5) {
       return (com.pancakedb.idl.PartitionField) value_;
    }
    return com.pancakedb.idl.PartitionField.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (valueCase_ == 1) {
      output.writeMessage(1, (com.pancakedb.idl.PartitionField) value_);
    }
    if (valueCase_ == 2) {
      output.writeMessage(2, (com.pancakedb.idl.PartitionField) value_);
    }
    if (valueCase_ == 3) {
      output.writeMessage(3, (com.pancakedb.idl.PartitionField) value_);
    }
    if (valueCase_ == 4) {
      output.writeMessage(4, (com.pancakedb.idl.PartitionField) value_);
    }
    if (valueCase_ == 5) {
      output.writeMessage(5, (com.pancakedb.idl.PartitionField) value_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (valueCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.pancakedb.idl.PartitionField) value_);
    }
    if (valueCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.pancakedb.idl.PartitionField) value_);
    }
    if (valueCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.pancakedb.idl.PartitionField) value_);
    }
    if (valueCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (com.pancakedb.idl.PartitionField) value_);
    }
    if (valueCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (com.pancakedb.idl.PartitionField) value_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.pancakedb.idl.PartitionFilter)) {
      return super.equals(obj);
    }
    com.pancakedb.idl.PartitionFilter other = (com.pancakedb.idl.PartitionFilter) obj;

    if (!getValueCase().equals(other.getValueCase())) return false;
    switch (valueCase_) {
      case 1:
        if (!getEqualTo()
            .equals(other.getEqualTo())) return false;
        break;
      case 2:
        if (!getLessOrEqTo()
            .equals(other.getLessOrEqTo())) return false;
        break;
      case 3:
        if (!getLessThan()
            .equals(other.getLessThan())) return false;
        break;
      case 4:
        if (!getGreaterOrEqTo()
            .equals(other.getGreaterOrEqTo())) return false;
        break;
      case 5:
        if (!getGreaterThan()
            .equals(other.getGreaterThan())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (valueCase_) {
      case 1:
        hash = (37 * hash) + EQUAL_TO_FIELD_NUMBER;
        hash = (53 * hash) + getEqualTo().hashCode();
        break;
      case 2:
        hash = (37 * hash) + LESS_OR_EQ_TO_FIELD_NUMBER;
        hash = (53 * hash) + getLessOrEqTo().hashCode();
        break;
      case 3:
        hash = (37 * hash) + LESS_THAN_FIELD_NUMBER;
        hash = (53 * hash) + getLessThan().hashCode();
        break;
      case 4:
        hash = (37 * hash) + GREATER_OR_EQ_TO_FIELD_NUMBER;
        hash = (53 * hash) + getGreaterOrEqTo().hashCode();
        break;
      case 5:
        hash = (37 * hash) + GREATER_THAN_FIELD_NUMBER;
        hash = (53 * hash) + getGreaterThan().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.pancakedb.idl.PartitionFilter parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.pancakedb.idl.PartitionFilter parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.pancakedb.idl.PartitionFilter parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.pancakedb.idl.PartitionFilter parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.pancakedb.idl.PartitionFilter parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.pancakedb.idl.PartitionFilter parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.pancakedb.idl.PartitionFilter parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.pancakedb.idl.PartitionFilter parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.pancakedb.idl.PartitionFilter parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.pancakedb.idl.PartitionFilter parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.pancakedb.idl.PartitionFilter parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.pancakedb.idl.PartitionFilter parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.pancakedb.idl.PartitionFilter prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   *LISTING SEGMENTS
   * </pre>
   *
   * Protobuf type {@code protos.dml.PartitionFilter}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:protos.dml.PartitionFilter)
      com.pancakedb.idl.PartitionFilterOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.pancakedb.idl.Dml.internal_static_protos_dml_PartitionFilter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.pancakedb.idl.Dml.internal_static_protos_dml_PartitionFilter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.pancakedb.idl.PartitionFilter.class, com.pancakedb.idl.PartitionFilter.Builder.class);
    }

    // Construct using com.pancakedb.idl.PartitionFilter.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      valueCase_ = 0;
      value_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.pancakedb.idl.Dml.internal_static_protos_dml_PartitionFilter_descriptor;
    }

    @java.lang.Override
    public com.pancakedb.idl.PartitionFilter getDefaultInstanceForType() {
      return com.pancakedb.idl.PartitionFilter.getDefaultInstance();
    }

    @java.lang.Override
    public com.pancakedb.idl.PartitionFilter build() {
      com.pancakedb.idl.PartitionFilter result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.pancakedb.idl.PartitionFilter buildPartial() {
      com.pancakedb.idl.PartitionFilter result = new com.pancakedb.idl.PartitionFilter(this);
      if (valueCase_ == 1) {
        if (equalToBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = equalToBuilder_.build();
        }
      }
      if (valueCase_ == 2) {
        if (lessOrEqToBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = lessOrEqToBuilder_.build();
        }
      }
      if (valueCase_ == 3) {
        if (lessThanBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = lessThanBuilder_.build();
        }
      }
      if (valueCase_ == 4) {
        if (greaterOrEqToBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = greaterOrEqToBuilder_.build();
        }
      }
      if (valueCase_ == 5) {
        if (greaterThanBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = greaterThanBuilder_.build();
        }
      }
      result.valueCase_ = valueCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.pancakedb.idl.PartitionFilter) {
        return mergeFrom((com.pancakedb.idl.PartitionFilter)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.pancakedb.idl.PartitionFilter other) {
      if (other == com.pancakedb.idl.PartitionFilter.getDefaultInstance()) return this;
      switch (other.getValueCase()) {
        case EQUAL_TO: {
          mergeEqualTo(other.getEqualTo());
          break;
        }
        case LESS_OR_EQ_TO: {
          mergeLessOrEqTo(other.getLessOrEqTo());
          break;
        }
        case LESS_THAN: {
          mergeLessThan(other.getLessThan());
          break;
        }
        case GREATER_OR_EQ_TO: {
          mergeGreaterOrEqTo(other.getGreaterOrEqTo());
          break;
        }
        case GREATER_THAN: {
          mergeGreaterThan(other.getGreaterThan());
          break;
        }
        case VALUE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.pancakedb.idl.PartitionFilter parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.pancakedb.idl.PartitionFilter) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int valueCase_ = 0;
    private java.lang.Object value_;
    public ValueCase
        getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    public Builder clearValue() {
      valueCase_ = 0;
      value_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        com.pancakedb.idl.PartitionField, com.pancakedb.idl.PartitionField.Builder, com.pancakedb.idl.PartitionFieldOrBuilder> equalToBuilder_;
    /**
     * <code>.protos.dml.PartitionField equal_to = 1;</code>
     * @return Whether the equalTo field is set.
     */
    @java.lang.Override
    public boolean hasEqualTo() {
      return valueCase_ == 1;
    }
    /**
     * <code>.protos.dml.PartitionField equal_to = 1;</code>
     * @return The equalTo.
     */
    @java.lang.Override
    public com.pancakedb.idl.PartitionField getEqualTo() {
      if (equalToBuilder_ == null) {
        if (valueCase_ == 1) {
          return (com.pancakedb.idl.PartitionField) value_;
        }
        return com.pancakedb.idl.PartitionField.getDefaultInstance();
      } else {
        if (valueCase_ == 1) {
          return equalToBuilder_.getMessage();
        }
        return com.pancakedb.idl.PartitionField.getDefaultInstance();
      }
    }
    /**
     * <code>.protos.dml.PartitionField equal_to = 1;</code>
     */
    public Builder setEqualTo(com.pancakedb.idl.PartitionField value) {
      if (equalToBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        value_ = value;
        onChanged();
      } else {
        equalToBuilder_.setMessage(value);
      }
      valueCase_ = 1;
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField equal_to = 1;</code>
     */
    public Builder setEqualTo(
        com.pancakedb.idl.PartitionField.Builder builderForValue) {
      if (equalToBuilder_ == null) {
        value_ = builderForValue.build();
        onChanged();
      } else {
        equalToBuilder_.setMessage(builderForValue.build());
      }
      valueCase_ = 1;
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField equal_to = 1;</code>
     */
    public Builder mergeEqualTo(com.pancakedb.idl.PartitionField value) {
      if (equalToBuilder_ == null) {
        if (valueCase_ == 1 &&
            value_ != com.pancakedb.idl.PartitionField.getDefaultInstance()) {
          value_ = com.pancakedb.idl.PartitionField.newBuilder((com.pancakedb.idl.PartitionField) value_)
              .mergeFrom(value).buildPartial();
        } else {
          value_ = value;
        }
        onChanged();
      } else {
        if (valueCase_ == 1) {
          equalToBuilder_.mergeFrom(value);
        }
        equalToBuilder_.setMessage(value);
      }
      valueCase_ = 1;
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField equal_to = 1;</code>
     */
    public Builder clearEqualTo() {
      if (equalToBuilder_ == null) {
        if (valueCase_ == 1) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
      } else {
        if (valueCase_ == 1) {
          valueCase_ = 0;
          value_ = null;
        }
        equalToBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField equal_to = 1;</code>
     */
    public com.pancakedb.idl.PartitionField.Builder getEqualToBuilder() {
      return getEqualToFieldBuilder().getBuilder();
    }
    /**
     * <code>.protos.dml.PartitionField equal_to = 1;</code>
     */
    @java.lang.Override
    public com.pancakedb.idl.PartitionFieldOrBuilder getEqualToOrBuilder() {
      if ((valueCase_ == 1) && (equalToBuilder_ != null)) {
        return equalToBuilder_.getMessageOrBuilder();
      } else {
        if (valueCase_ == 1) {
          return (com.pancakedb.idl.PartitionField) value_;
        }
        return com.pancakedb.idl.PartitionField.getDefaultInstance();
      }
    }
    /**
     * <code>.protos.dml.PartitionField equal_to = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.pancakedb.idl.PartitionField, com.pancakedb.idl.PartitionField.Builder, com.pancakedb.idl.PartitionFieldOrBuilder> 
        getEqualToFieldBuilder() {
      if (equalToBuilder_ == null) {
        if (!(valueCase_ == 1)) {
          value_ = com.pancakedb.idl.PartitionField.getDefaultInstance();
        }
        equalToBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.pancakedb.idl.PartitionField, com.pancakedb.idl.PartitionField.Builder, com.pancakedb.idl.PartitionFieldOrBuilder>(
                (com.pancakedb.idl.PartitionField) value_,
                getParentForChildren(),
                isClean());
        value_ = null;
      }
      valueCase_ = 1;
      onChanged();;
      return equalToBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.pancakedb.idl.PartitionField, com.pancakedb.idl.PartitionField.Builder, com.pancakedb.idl.PartitionFieldOrBuilder> lessOrEqToBuilder_;
    /**
     * <code>.protos.dml.PartitionField less_or_eq_to = 2;</code>
     * @return Whether the lessOrEqTo field is set.
     */
    @java.lang.Override
    public boolean hasLessOrEqTo() {
      return valueCase_ == 2;
    }
    /**
     * <code>.protos.dml.PartitionField less_or_eq_to = 2;</code>
     * @return The lessOrEqTo.
     */
    @java.lang.Override
    public com.pancakedb.idl.PartitionField getLessOrEqTo() {
      if (lessOrEqToBuilder_ == null) {
        if (valueCase_ == 2) {
          return (com.pancakedb.idl.PartitionField) value_;
        }
        return com.pancakedb.idl.PartitionField.getDefaultInstance();
      } else {
        if (valueCase_ == 2) {
          return lessOrEqToBuilder_.getMessage();
        }
        return com.pancakedb.idl.PartitionField.getDefaultInstance();
      }
    }
    /**
     * <code>.protos.dml.PartitionField less_or_eq_to = 2;</code>
     */
    public Builder setLessOrEqTo(com.pancakedb.idl.PartitionField value) {
      if (lessOrEqToBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        value_ = value;
        onChanged();
      } else {
        lessOrEqToBuilder_.setMessage(value);
      }
      valueCase_ = 2;
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField less_or_eq_to = 2;</code>
     */
    public Builder setLessOrEqTo(
        com.pancakedb.idl.PartitionField.Builder builderForValue) {
      if (lessOrEqToBuilder_ == null) {
        value_ = builderForValue.build();
        onChanged();
      } else {
        lessOrEqToBuilder_.setMessage(builderForValue.build());
      }
      valueCase_ = 2;
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField less_or_eq_to = 2;</code>
     */
    public Builder mergeLessOrEqTo(com.pancakedb.idl.PartitionField value) {
      if (lessOrEqToBuilder_ == null) {
        if (valueCase_ == 2 &&
            value_ != com.pancakedb.idl.PartitionField.getDefaultInstance()) {
          value_ = com.pancakedb.idl.PartitionField.newBuilder((com.pancakedb.idl.PartitionField) value_)
              .mergeFrom(value).buildPartial();
        } else {
          value_ = value;
        }
        onChanged();
      } else {
        if (valueCase_ == 2) {
          lessOrEqToBuilder_.mergeFrom(value);
        }
        lessOrEqToBuilder_.setMessage(value);
      }
      valueCase_ = 2;
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField less_or_eq_to = 2;</code>
     */
    public Builder clearLessOrEqTo() {
      if (lessOrEqToBuilder_ == null) {
        if (valueCase_ == 2) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
      } else {
        if (valueCase_ == 2) {
          valueCase_ = 0;
          value_ = null;
        }
        lessOrEqToBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField less_or_eq_to = 2;</code>
     */
    public com.pancakedb.idl.PartitionField.Builder getLessOrEqToBuilder() {
      return getLessOrEqToFieldBuilder().getBuilder();
    }
    /**
     * <code>.protos.dml.PartitionField less_or_eq_to = 2;</code>
     */
    @java.lang.Override
    public com.pancakedb.idl.PartitionFieldOrBuilder getLessOrEqToOrBuilder() {
      if ((valueCase_ == 2) && (lessOrEqToBuilder_ != null)) {
        return lessOrEqToBuilder_.getMessageOrBuilder();
      } else {
        if (valueCase_ == 2) {
          return (com.pancakedb.idl.PartitionField) value_;
        }
        return com.pancakedb.idl.PartitionField.getDefaultInstance();
      }
    }
    /**
     * <code>.protos.dml.PartitionField less_or_eq_to = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.pancakedb.idl.PartitionField, com.pancakedb.idl.PartitionField.Builder, com.pancakedb.idl.PartitionFieldOrBuilder> 
        getLessOrEqToFieldBuilder() {
      if (lessOrEqToBuilder_ == null) {
        if (!(valueCase_ == 2)) {
          value_ = com.pancakedb.idl.PartitionField.getDefaultInstance();
        }
        lessOrEqToBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.pancakedb.idl.PartitionField, com.pancakedb.idl.PartitionField.Builder, com.pancakedb.idl.PartitionFieldOrBuilder>(
                (com.pancakedb.idl.PartitionField) value_,
                getParentForChildren(),
                isClean());
        value_ = null;
      }
      valueCase_ = 2;
      onChanged();;
      return lessOrEqToBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.pancakedb.idl.PartitionField, com.pancakedb.idl.PartitionField.Builder, com.pancakedb.idl.PartitionFieldOrBuilder> lessThanBuilder_;
    /**
     * <code>.protos.dml.PartitionField less_than = 3;</code>
     * @return Whether the lessThan field is set.
     */
    @java.lang.Override
    public boolean hasLessThan() {
      return valueCase_ == 3;
    }
    /**
     * <code>.protos.dml.PartitionField less_than = 3;</code>
     * @return The lessThan.
     */
    @java.lang.Override
    public com.pancakedb.idl.PartitionField getLessThan() {
      if (lessThanBuilder_ == null) {
        if (valueCase_ == 3) {
          return (com.pancakedb.idl.PartitionField) value_;
        }
        return com.pancakedb.idl.PartitionField.getDefaultInstance();
      } else {
        if (valueCase_ == 3) {
          return lessThanBuilder_.getMessage();
        }
        return com.pancakedb.idl.PartitionField.getDefaultInstance();
      }
    }
    /**
     * <code>.protos.dml.PartitionField less_than = 3;</code>
     */
    public Builder setLessThan(com.pancakedb.idl.PartitionField value) {
      if (lessThanBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        value_ = value;
        onChanged();
      } else {
        lessThanBuilder_.setMessage(value);
      }
      valueCase_ = 3;
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField less_than = 3;</code>
     */
    public Builder setLessThan(
        com.pancakedb.idl.PartitionField.Builder builderForValue) {
      if (lessThanBuilder_ == null) {
        value_ = builderForValue.build();
        onChanged();
      } else {
        lessThanBuilder_.setMessage(builderForValue.build());
      }
      valueCase_ = 3;
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField less_than = 3;</code>
     */
    public Builder mergeLessThan(com.pancakedb.idl.PartitionField value) {
      if (lessThanBuilder_ == null) {
        if (valueCase_ == 3 &&
            value_ != com.pancakedb.idl.PartitionField.getDefaultInstance()) {
          value_ = com.pancakedb.idl.PartitionField.newBuilder((com.pancakedb.idl.PartitionField) value_)
              .mergeFrom(value).buildPartial();
        } else {
          value_ = value;
        }
        onChanged();
      } else {
        if (valueCase_ == 3) {
          lessThanBuilder_.mergeFrom(value);
        }
        lessThanBuilder_.setMessage(value);
      }
      valueCase_ = 3;
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField less_than = 3;</code>
     */
    public Builder clearLessThan() {
      if (lessThanBuilder_ == null) {
        if (valueCase_ == 3) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
      } else {
        if (valueCase_ == 3) {
          valueCase_ = 0;
          value_ = null;
        }
        lessThanBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField less_than = 3;</code>
     */
    public com.pancakedb.idl.PartitionField.Builder getLessThanBuilder() {
      return getLessThanFieldBuilder().getBuilder();
    }
    /**
     * <code>.protos.dml.PartitionField less_than = 3;</code>
     */
    @java.lang.Override
    public com.pancakedb.idl.PartitionFieldOrBuilder getLessThanOrBuilder() {
      if ((valueCase_ == 3) && (lessThanBuilder_ != null)) {
        return lessThanBuilder_.getMessageOrBuilder();
      } else {
        if (valueCase_ == 3) {
          return (com.pancakedb.idl.PartitionField) value_;
        }
        return com.pancakedb.idl.PartitionField.getDefaultInstance();
      }
    }
    /**
     * <code>.protos.dml.PartitionField less_than = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.pancakedb.idl.PartitionField, com.pancakedb.idl.PartitionField.Builder, com.pancakedb.idl.PartitionFieldOrBuilder> 
        getLessThanFieldBuilder() {
      if (lessThanBuilder_ == null) {
        if (!(valueCase_ == 3)) {
          value_ = com.pancakedb.idl.PartitionField.getDefaultInstance();
        }
        lessThanBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.pancakedb.idl.PartitionField, com.pancakedb.idl.PartitionField.Builder, com.pancakedb.idl.PartitionFieldOrBuilder>(
                (com.pancakedb.idl.PartitionField) value_,
                getParentForChildren(),
                isClean());
        value_ = null;
      }
      valueCase_ = 3;
      onChanged();;
      return lessThanBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.pancakedb.idl.PartitionField, com.pancakedb.idl.PartitionField.Builder, com.pancakedb.idl.PartitionFieldOrBuilder> greaterOrEqToBuilder_;
    /**
     * <code>.protos.dml.PartitionField greater_or_eq_to = 4;</code>
     * @return Whether the greaterOrEqTo field is set.
     */
    @java.lang.Override
    public boolean hasGreaterOrEqTo() {
      return valueCase_ == 4;
    }
    /**
     * <code>.protos.dml.PartitionField greater_or_eq_to = 4;</code>
     * @return The greaterOrEqTo.
     */
    @java.lang.Override
    public com.pancakedb.idl.PartitionField getGreaterOrEqTo() {
      if (greaterOrEqToBuilder_ == null) {
        if (valueCase_ == 4) {
          return (com.pancakedb.idl.PartitionField) value_;
        }
        return com.pancakedb.idl.PartitionField.getDefaultInstance();
      } else {
        if (valueCase_ == 4) {
          return greaterOrEqToBuilder_.getMessage();
        }
        return com.pancakedb.idl.PartitionField.getDefaultInstance();
      }
    }
    /**
     * <code>.protos.dml.PartitionField greater_or_eq_to = 4;</code>
     */
    public Builder setGreaterOrEqTo(com.pancakedb.idl.PartitionField value) {
      if (greaterOrEqToBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        value_ = value;
        onChanged();
      } else {
        greaterOrEqToBuilder_.setMessage(value);
      }
      valueCase_ = 4;
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField greater_or_eq_to = 4;</code>
     */
    public Builder setGreaterOrEqTo(
        com.pancakedb.idl.PartitionField.Builder builderForValue) {
      if (greaterOrEqToBuilder_ == null) {
        value_ = builderForValue.build();
        onChanged();
      } else {
        greaterOrEqToBuilder_.setMessage(builderForValue.build());
      }
      valueCase_ = 4;
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField greater_or_eq_to = 4;</code>
     */
    public Builder mergeGreaterOrEqTo(com.pancakedb.idl.PartitionField value) {
      if (greaterOrEqToBuilder_ == null) {
        if (valueCase_ == 4 &&
            value_ != com.pancakedb.idl.PartitionField.getDefaultInstance()) {
          value_ = com.pancakedb.idl.PartitionField.newBuilder((com.pancakedb.idl.PartitionField) value_)
              .mergeFrom(value).buildPartial();
        } else {
          value_ = value;
        }
        onChanged();
      } else {
        if (valueCase_ == 4) {
          greaterOrEqToBuilder_.mergeFrom(value);
        }
        greaterOrEqToBuilder_.setMessage(value);
      }
      valueCase_ = 4;
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField greater_or_eq_to = 4;</code>
     */
    public Builder clearGreaterOrEqTo() {
      if (greaterOrEqToBuilder_ == null) {
        if (valueCase_ == 4) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
      } else {
        if (valueCase_ == 4) {
          valueCase_ = 0;
          value_ = null;
        }
        greaterOrEqToBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField greater_or_eq_to = 4;</code>
     */
    public com.pancakedb.idl.PartitionField.Builder getGreaterOrEqToBuilder() {
      return getGreaterOrEqToFieldBuilder().getBuilder();
    }
    /**
     * <code>.protos.dml.PartitionField greater_or_eq_to = 4;</code>
     */
    @java.lang.Override
    public com.pancakedb.idl.PartitionFieldOrBuilder getGreaterOrEqToOrBuilder() {
      if ((valueCase_ == 4) && (greaterOrEqToBuilder_ != null)) {
        return greaterOrEqToBuilder_.getMessageOrBuilder();
      } else {
        if (valueCase_ == 4) {
          return (com.pancakedb.idl.PartitionField) value_;
        }
        return com.pancakedb.idl.PartitionField.getDefaultInstance();
      }
    }
    /**
     * <code>.protos.dml.PartitionField greater_or_eq_to = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.pancakedb.idl.PartitionField, com.pancakedb.idl.PartitionField.Builder, com.pancakedb.idl.PartitionFieldOrBuilder> 
        getGreaterOrEqToFieldBuilder() {
      if (greaterOrEqToBuilder_ == null) {
        if (!(valueCase_ == 4)) {
          value_ = com.pancakedb.idl.PartitionField.getDefaultInstance();
        }
        greaterOrEqToBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.pancakedb.idl.PartitionField, com.pancakedb.idl.PartitionField.Builder, com.pancakedb.idl.PartitionFieldOrBuilder>(
                (com.pancakedb.idl.PartitionField) value_,
                getParentForChildren(),
                isClean());
        value_ = null;
      }
      valueCase_ = 4;
      onChanged();;
      return greaterOrEqToBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.pancakedb.idl.PartitionField, com.pancakedb.idl.PartitionField.Builder, com.pancakedb.idl.PartitionFieldOrBuilder> greaterThanBuilder_;
    /**
     * <code>.protos.dml.PartitionField greater_than = 5;</code>
     * @return Whether the greaterThan field is set.
     */
    @java.lang.Override
    public boolean hasGreaterThan() {
      return valueCase_ == 5;
    }
    /**
     * <code>.protos.dml.PartitionField greater_than = 5;</code>
     * @return The greaterThan.
     */
    @java.lang.Override
    public com.pancakedb.idl.PartitionField getGreaterThan() {
      if (greaterThanBuilder_ == null) {
        if (valueCase_ == 5) {
          return (com.pancakedb.idl.PartitionField) value_;
        }
        return com.pancakedb.idl.PartitionField.getDefaultInstance();
      } else {
        if (valueCase_ == 5) {
          return greaterThanBuilder_.getMessage();
        }
        return com.pancakedb.idl.PartitionField.getDefaultInstance();
      }
    }
    /**
     * <code>.protos.dml.PartitionField greater_than = 5;</code>
     */
    public Builder setGreaterThan(com.pancakedb.idl.PartitionField value) {
      if (greaterThanBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        value_ = value;
        onChanged();
      } else {
        greaterThanBuilder_.setMessage(value);
      }
      valueCase_ = 5;
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField greater_than = 5;</code>
     */
    public Builder setGreaterThan(
        com.pancakedb.idl.PartitionField.Builder builderForValue) {
      if (greaterThanBuilder_ == null) {
        value_ = builderForValue.build();
        onChanged();
      } else {
        greaterThanBuilder_.setMessage(builderForValue.build());
      }
      valueCase_ = 5;
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField greater_than = 5;</code>
     */
    public Builder mergeGreaterThan(com.pancakedb.idl.PartitionField value) {
      if (greaterThanBuilder_ == null) {
        if (valueCase_ == 5 &&
            value_ != com.pancakedb.idl.PartitionField.getDefaultInstance()) {
          value_ = com.pancakedb.idl.PartitionField.newBuilder((com.pancakedb.idl.PartitionField) value_)
              .mergeFrom(value).buildPartial();
        } else {
          value_ = value;
        }
        onChanged();
      } else {
        if (valueCase_ == 5) {
          greaterThanBuilder_.mergeFrom(value);
        }
        greaterThanBuilder_.setMessage(value);
      }
      valueCase_ = 5;
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField greater_than = 5;</code>
     */
    public Builder clearGreaterThan() {
      if (greaterThanBuilder_ == null) {
        if (valueCase_ == 5) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
      } else {
        if (valueCase_ == 5) {
          valueCase_ = 0;
          value_ = null;
        }
        greaterThanBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.protos.dml.PartitionField greater_than = 5;</code>
     */
    public com.pancakedb.idl.PartitionField.Builder getGreaterThanBuilder() {
      return getGreaterThanFieldBuilder().getBuilder();
    }
    /**
     * <code>.protos.dml.PartitionField greater_than = 5;</code>
     */
    @java.lang.Override
    public com.pancakedb.idl.PartitionFieldOrBuilder getGreaterThanOrBuilder() {
      if ((valueCase_ == 5) && (greaterThanBuilder_ != null)) {
        return greaterThanBuilder_.getMessageOrBuilder();
      } else {
        if (valueCase_ == 5) {
          return (com.pancakedb.idl.PartitionField) value_;
        }
        return com.pancakedb.idl.PartitionField.getDefaultInstance();
      }
    }
    /**
     * <code>.protos.dml.PartitionField greater_than = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.pancakedb.idl.PartitionField, com.pancakedb.idl.PartitionField.Builder, com.pancakedb.idl.PartitionFieldOrBuilder> 
        getGreaterThanFieldBuilder() {
      if (greaterThanBuilder_ == null) {
        if (!(valueCase_ == 5)) {
          value_ = com.pancakedb.idl.PartitionField.getDefaultInstance();
        }
        greaterThanBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.pancakedb.idl.PartitionField, com.pancakedb.idl.PartitionField.Builder, com.pancakedb.idl.PartitionFieldOrBuilder>(
                (com.pancakedb.idl.PartitionField) value_,
                getParentForChildren(),
                isClean());
        value_ = null;
      }
      valueCase_ = 5;
      onChanged();;
      return greaterThanBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:protos.dml.PartitionFilter)
  }

  // @@protoc_insertion_point(class_scope:protos.dml.PartitionFilter)
  private static final com.pancakedb.idl.PartitionFilter DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.pancakedb.idl.PartitionFilter();
  }

  public static com.pancakedb.idl.PartitionFilter getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PartitionFilter>
      PARSER = new com.google.protobuf.AbstractParser<PartitionFilter>() {
    @java.lang.Override
    public PartitionFilter parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new PartitionFilter(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<PartitionFilter> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PartitionFilter> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.pancakedb.idl.PartitionFilter getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

