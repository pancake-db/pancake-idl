// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dml.proto

package com.pancakedb.idl;

public interface DeleteFromSegmentRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:protos.dml.DeleteFromSegmentRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string table_name = 1;</code>
   * @return The tableName.
   */
  java.lang.String getTableName();
  /**
   * <code>string table_name = 1;</code>
   * @return The bytes for tableName.
   */
  com.google.protobuf.ByteString
      getTableNameBytes();

  /**
   * <code>map&lt;string, .protos.dml.PartitionFieldValue&gt; partition = 2;</code>
   */
  int getPartitionCount();
  /**
   * <code>map&lt;string, .protos.dml.PartitionFieldValue&gt; partition = 2;</code>
   */
  boolean containsPartition(
      java.lang.String key);
  /**
   * Use {@link #getPartitionMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.pancakedb.idl.PartitionFieldValue>
  getPartition();
  /**
   * <code>map&lt;string, .protos.dml.PartitionFieldValue&gt; partition = 2;</code>
   */
  java.util.Map<java.lang.String, com.pancakedb.idl.PartitionFieldValue>
  getPartitionMap();
  /**
   * <code>map&lt;string, .protos.dml.PartitionFieldValue&gt; partition = 2;</code>
   */

  com.pancakedb.idl.PartitionFieldValue getPartitionOrDefault(
      java.lang.String key,
      com.pancakedb.idl.PartitionFieldValue defaultValue);
  /**
   * <code>map&lt;string, .protos.dml.PartitionFieldValue&gt; partition = 2;</code>
   */

  com.pancakedb.idl.PartitionFieldValue getPartitionOrThrow(
      java.lang.String key);

  /**
   * <code>string segment_id = 3;</code>
   * @return The segmentId.
   */
  java.lang.String getSegmentId();
  /**
   * <code>string segment_id = 3;</code>
   * @return The bytes for segmentId.
   */
  com.google.protobuf.ByteString
      getSegmentIdBytes();

  /**
   * <code>repeated uint32 row_ids = 4;</code>
   * @return A list containing the rowIds.
   */
  java.util.List<java.lang.Integer> getRowIdsList();
  /**
   * <code>repeated uint32 row_ids = 4;</code>
   * @return The count of rowIds.
   */
  int getRowIdsCount();
  /**
   * <code>repeated uint32 row_ids = 4;</code>
   * @param index The index of the element to return.
   * @return The rowIds at the given index.
   */
  int getRowIds(int index);
}
