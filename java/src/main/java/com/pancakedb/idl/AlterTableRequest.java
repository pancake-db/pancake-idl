// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddl.proto

package com.pancakedb.idl;

/**
 * Protobuf type {@code protos.ddl.AlterTableRequest}
 */
public final class AlterTableRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:protos.ddl.AlterTableRequest)
    AlterTableRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use AlterTableRequest.newBuilder() to construct.
  private AlterTableRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AlterTableRequest() {
    tableName_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new AlterTableRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private AlterTableRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            tableName_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              newColumns_ = com.google.protobuf.MapField.newMapField(
                  NewColumnsDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.pancakedb.idl.ColumnMeta>
            newColumns__ = input.readMessage(
                NewColumnsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            newColumns_.getMutableMap().put(
                newColumns__.getKey(), newColumns__.getValue());
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.pancakedb.idl.Ddl.internal_static_protos_ddl_AlterTableRequest_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetNewColumns();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.pancakedb.idl.Ddl.internal_static_protos_ddl_AlterTableRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.pancakedb.idl.AlterTableRequest.class, com.pancakedb.idl.AlterTableRequest.Builder.class);
  }

  public static final int TABLE_NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object tableName_;
  /**
   * <code>string table_name = 1;</code>
   * @return The tableName.
   */
  @java.lang.Override
  public java.lang.String getTableName() {
    java.lang.Object ref = tableName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      tableName_ = s;
      return s;
    }
  }
  /**
   * <code>string table_name = 1;</code>
   * @return The bytes for tableName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTableNameBytes() {
    java.lang.Object ref = tableName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      tableName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int NEW_COLUMNS_FIELD_NUMBER = 2;
  private static final class NewColumnsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.pancakedb.idl.ColumnMeta> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.pancakedb.idl.ColumnMeta>newDefaultInstance(
                com.pancakedb.idl.Ddl.internal_static_protos_ddl_AlterTableRequest_NewColumnsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.pancakedb.idl.ColumnMeta.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.pancakedb.idl.ColumnMeta> newColumns_;
  private com.google.protobuf.MapField<java.lang.String, com.pancakedb.idl.ColumnMeta>
  internalGetNewColumns() {
    if (newColumns_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          NewColumnsDefaultEntryHolder.defaultEntry);
    }
    return newColumns_;
  }

  public int getNewColumnsCount() {
    return internalGetNewColumns().getMap().size();
  }
  /**
   * <code>map&lt;string, .protos.schema.ColumnMeta&gt; new_columns = 2;</code>
   */

  @java.lang.Override
  public boolean containsNewColumns(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetNewColumns().getMap().containsKey(key);
  }
  /**
   * Use {@link #getNewColumnsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.pancakedb.idl.ColumnMeta> getNewColumns() {
    return getNewColumnsMap();
  }
  /**
   * <code>map&lt;string, .protos.schema.ColumnMeta&gt; new_columns = 2;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, com.pancakedb.idl.ColumnMeta> getNewColumnsMap() {
    return internalGetNewColumns().getMap();
  }
  /**
   * <code>map&lt;string, .protos.schema.ColumnMeta&gt; new_columns = 2;</code>
   */
  @java.lang.Override

  public com.pancakedb.idl.ColumnMeta getNewColumnsOrDefault(
      java.lang.String key,
      com.pancakedb.idl.ColumnMeta defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, com.pancakedb.idl.ColumnMeta> map =
        internalGetNewColumns().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, .protos.schema.ColumnMeta&gt; new_columns = 2;</code>
   */
  @java.lang.Override

  public com.pancakedb.idl.ColumnMeta getNewColumnsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, com.pancakedb.idl.ColumnMeta> map =
        internalGetNewColumns().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getTableNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, tableName_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetNewColumns(),
        NewColumnsDefaultEntryHolder.defaultEntry,
        2);
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getTableNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, tableName_);
    }
    for (java.util.Map.Entry<java.lang.String, com.pancakedb.idl.ColumnMeta> entry
         : internalGetNewColumns().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.pancakedb.idl.ColumnMeta>
      newColumns__ = NewColumnsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, newColumns__);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.pancakedb.idl.AlterTableRequest)) {
      return super.equals(obj);
    }
    com.pancakedb.idl.AlterTableRequest other = (com.pancakedb.idl.AlterTableRequest) obj;

    if (!getTableName()
        .equals(other.getTableName())) return false;
    if (!internalGetNewColumns().equals(
        other.internalGetNewColumns())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TABLE_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getTableName().hashCode();
    if (!internalGetNewColumns().getMap().isEmpty()) {
      hash = (37 * hash) + NEW_COLUMNS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetNewColumns().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.pancakedb.idl.AlterTableRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.pancakedb.idl.AlterTableRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.pancakedb.idl.AlterTableRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.pancakedb.idl.AlterTableRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.pancakedb.idl.AlterTableRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.pancakedb.idl.AlterTableRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.pancakedb.idl.AlterTableRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.pancakedb.idl.AlterTableRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.pancakedb.idl.AlterTableRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.pancakedb.idl.AlterTableRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.pancakedb.idl.AlterTableRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.pancakedb.idl.AlterTableRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.pancakedb.idl.AlterTableRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code protos.ddl.AlterTableRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:protos.ddl.AlterTableRequest)
      com.pancakedb.idl.AlterTableRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.pancakedb.idl.Ddl.internal_static_protos_ddl_AlterTableRequest_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetNewColumns();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableNewColumns();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.pancakedb.idl.Ddl.internal_static_protos_ddl_AlterTableRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.pancakedb.idl.AlterTableRequest.class, com.pancakedb.idl.AlterTableRequest.Builder.class);
    }

    // Construct using com.pancakedb.idl.AlterTableRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      tableName_ = "";

      internalGetMutableNewColumns().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.pancakedb.idl.Ddl.internal_static_protos_ddl_AlterTableRequest_descriptor;
    }

    @java.lang.Override
    public com.pancakedb.idl.AlterTableRequest getDefaultInstanceForType() {
      return com.pancakedb.idl.AlterTableRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.pancakedb.idl.AlterTableRequest build() {
      com.pancakedb.idl.AlterTableRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.pancakedb.idl.AlterTableRequest buildPartial() {
      com.pancakedb.idl.AlterTableRequest result = new com.pancakedb.idl.AlterTableRequest(this);
      int from_bitField0_ = bitField0_;
      result.tableName_ = tableName_;
      result.newColumns_ = internalGetNewColumns();
      result.newColumns_.makeImmutable();
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.pancakedb.idl.AlterTableRequest) {
        return mergeFrom((com.pancakedb.idl.AlterTableRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.pancakedb.idl.AlterTableRequest other) {
      if (other == com.pancakedb.idl.AlterTableRequest.getDefaultInstance()) return this;
      if (!other.getTableName().isEmpty()) {
        tableName_ = other.tableName_;
        onChanged();
      }
      internalGetMutableNewColumns().mergeFrom(
          other.internalGetNewColumns());
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.pancakedb.idl.AlterTableRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.pancakedb.idl.AlterTableRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object tableName_ = "";
    /**
     * <code>string table_name = 1;</code>
     * @return The tableName.
     */
    public java.lang.String getTableName() {
      java.lang.Object ref = tableName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tableName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string table_name = 1;</code>
     * @return The bytes for tableName.
     */
    public com.google.protobuf.ByteString
        getTableNameBytes() {
      java.lang.Object ref = tableName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tableName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string table_name = 1;</code>
     * @param value The tableName to set.
     * @return This builder for chaining.
     */
    public Builder setTableName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      tableName_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string table_name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearTableName() {
      
      tableName_ = getDefaultInstance().getTableName();
      onChanged();
      return this;
    }
    /**
     * <code>string table_name = 1;</code>
     * @param value The bytes for tableName to set.
     * @return This builder for chaining.
     */
    public Builder setTableNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      tableName_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.pancakedb.idl.ColumnMeta> newColumns_;
    private com.google.protobuf.MapField<java.lang.String, com.pancakedb.idl.ColumnMeta>
    internalGetNewColumns() {
      if (newColumns_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            NewColumnsDefaultEntryHolder.defaultEntry);
      }
      return newColumns_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.pancakedb.idl.ColumnMeta>
    internalGetMutableNewColumns() {
      onChanged();;
      if (newColumns_ == null) {
        newColumns_ = com.google.protobuf.MapField.newMapField(
            NewColumnsDefaultEntryHolder.defaultEntry);
      }
      if (!newColumns_.isMutable()) {
        newColumns_ = newColumns_.copy();
      }
      return newColumns_;
    }

    public int getNewColumnsCount() {
      return internalGetNewColumns().getMap().size();
    }
    /**
     * <code>map&lt;string, .protos.schema.ColumnMeta&gt; new_columns = 2;</code>
     */

    @java.lang.Override
    public boolean containsNewColumns(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetNewColumns().getMap().containsKey(key);
    }
    /**
     * Use {@link #getNewColumnsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.pancakedb.idl.ColumnMeta> getNewColumns() {
      return getNewColumnsMap();
    }
    /**
     * <code>map&lt;string, .protos.schema.ColumnMeta&gt; new_columns = 2;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.pancakedb.idl.ColumnMeta> getNewColumnsMap() {
      return internalGetNewColumns().getMap();
    }
    /**
     * <code>map&lt;string, .protos.schema.ColumnMeta&gt; new_columns = 2;</code>
     */
    @java.lang.Override

    public com.pancakedb.idl.ColumnMeta getNewColumnsOrDefault(
        java.lang.String key,
        com.pancakedb.idl.ColumnMeta defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, com.pancakedb.idl.ColumnMeta> map =
          internalGetNewColumns().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .protos.schema.ColumnMeta&gt; new_columns = 2;</code>
     */
    @java.lang.Override

    public com.pancakedb.idl.ColumnMeta getNewColumnsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, com.pancakedb.idl.ColumnMeta> map =
          internalGetNewColumns().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearNewColumns() {
      internalGetMutableNewColumns().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, .protos.schema.ColumnMeta&gt; new_columns = 2;</code>
     */

    public Builder removeNewColumns(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableNewColumns().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.pancakedb.idl.ColumnMeta>
    getMutableNewColumns() {
      return internalGetMutableNewColumns().getMutableMap();
    }
    /**
     * <code>map&lt;string, .protos.schema.ColumnMeta&gt; new_columns = 2;</code>
     */
    public Builder putNewColumns(
        java.lang.String key,
        com.pancakedb.idl.ColumnMeta value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableNewColumns().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;string, .protos.schema.ColumnMeta&gt; new_columns = 2;</code>
     */

    public Builder putAllNewColumns(
        java.util.Map<java.lang.String, com.pancakedb.idl.ColumnMeta> values) {
      internalGetMutableNewColumns().getMutableMap()
          .putAll(values);
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:protos.ddl.AlterTableRequest)
  }

  // @@protoc_insertion_point(class_scope:protos.ddl.AlterTableRequest)
  private static final com.pancakedb.idl.AlterTableRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.pancakedb.idl.AlterTableRequest();
  }

  public static com.pancakedb.idl.AlterTableRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AlterTableRequest>
      PARSER = new com.google.protobuf.AbstractParser<AlterTableRequest>() {
    @java.lang.Override
    public AlterTableRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new AlterTableRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<AlterTableRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AlterTableRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.pancakedb.idl.AlterTableRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

